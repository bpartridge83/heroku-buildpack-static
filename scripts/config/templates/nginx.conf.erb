daemon off;
worker_processes auto;

events {
  use epoll;
  accept_mutex on;
  worker_connections <%= worker_connections %>;
}

http {
  gzip on;
  gzip_disable "msie6";
  gzip_comp_level 6;
  gzip_min_length 512;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
  gzip_vary on;
  gzip_proxied any;

  server_tokens off;

<% if logging['access'] %>
  access_log logs/access.log;
<% else %>
  access_log off;
<% end %>

<% if debug %>
  error_log stderr debug;
  rewrite_log on;
<% else %>
  error_log stderr <%= logging['error'] %>;
<% end %>

  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  #Must read the body in 5 seconds.
  client_body_timeout 5;

  server {
    listen <%= port %> reuseport;
    charset <%= encoding %>;
    port_in_redirect off;
    keepalive_timeout 5;
    root <%= root %>;
  <% if error_page %>
    error_page 404 500 /<%= error_page %>;
  <% end %>
  <% if proxies.any? %>
    resolver <%= resolver %>;
  <% end %>

  <% if basic_auth %>
    auth_basic "Restricted";
    auth_basic_user_file <%= basic_auth_htpasswd_path %>;
  <% end %>

  <% if ENV['CSP_NONCE_ID'] %>
    set_secure_random_alphanum $cspNonce 32;
    sub_filter_once off;
    sub_filter_types *;
    sub_filter '<%= ENV['CSP_NONCE_ID'] %>' '$cspNonce';

    set $nonceKey '<%= ENV['CSP_NONCE_ID'] %>';
    set $nonce '$cspNonce';
  <% end %>

    # mruby_post_read_handler /app/bin/config/lib/ngx_mruby/headers.rb cache;

    mruby_post_read_handler_code '
      eval(File.read('/app/bin/config/lib/nginx_config_util.rb'))

      USER_CONFIG = "/app/static.json"

      config = {}
      config = JSON.parse(File.read(USER_CONFIG)) if File.exist?(USER_CONFIG)
      req    = Nginx::Request.new
      uri    = req.var.uri

      r = Nginx::Request.new.var
      nonce = r.nonce
      nonceKey = r.nonceKey

      if config["headers"]
        config["headers"].to_a.reverse.each do |route, header_hash|
          if Regexp.compile("^#{NginxConfigUtil.to_regex(route)}$") =~ uri
            header_hash.each do |key, value|
              # value must be a string
              req.headers_out[key] = value.to_s.gsub('**TEST**', nonce)
            end
            break
          end
        end
      end
    ';

    location / {
    <% if ENV['CSP_NONCE_ID'] %>
      proxy_set_header Accept-Encoding "";
      add_header X-Nonce $cspNonce;
    <% end %>

      mruby_set $fallback /app/bin/config/lib/ngx_mruby/routes_fallback.rb cache;
    <% if clean_urls %>
      try_files $uri.html $uri $uri/ $fallback;
    <% else %>
      try_files $uri $uri/ $fallback;
    <% end %>
    }

  <% if clean_urls %>
    location ~ \.html$ {
      try_files $uri =404;
    }
  <% end %>

  <% if https_only %>
    if ($http_x_forwarded_proto != "https") {
      return 301 https://$host$request_uri;
    }
  <% end %>

  <% if canonical_host %>
    if ($host != <%= canonical_host %>) {
      return 301 $http_x_forwarded_proto://<%= canonical_host %>$request_uri;
    }
  <% end %>

  <% routes.each do |route, path| %>
    location ~ ^<%= route %>$ {
      set $route <%= route %>;
      mruby_set $path /app/bin/config/lib/ngx_mruby/routes_path.rb cache;
      mruby_set $fallback /app/bin/config/lib/ngx_mruby/routes_fallback.rb cache;
    <% if clean_urls %>
      try_files $uri.html $uri $uri/ $path $fallback;
    <% else %>
      try_files $uri $path $fallback;
    <% end %>
    }
  <% end %>

  # need this b/c setting $fallback to =404 will try #{root}=404 instead of returning a 404
  location @404 {
    return 404;
  }

  # fallback proxy named match
  <% proxies.each do |location, hash| %>
    set $<%= hash['name'] %> <%= hash['host'] %>;
    location @<%= location %> {
      rewrite ^<%= location %>/?(.*)$ <%= hash['path'] %>/$1 break;
      # can reuse variable set above
      proxy_pass $<%= hash['name'] %>;
      proxy_ssl_server_name on;
      <% %w(http https).each do |scheme| %>
      proxy_redirect <%= hash["redirect_#{scheme}"] %> <%= location %>;
      <% end %>
    }
  <% end %>

  # fallback redirects named match
  <% redirects.each do |path, hash| %>
    location @<%= path %> {
      return <%= hash['status'] || 301 %> <%= hash['url'] %>;
    }
  <% end %>

  }
}
